@inherits LayoutComponentBase
@using TestArtem.Components.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<CascadingValue Value=this>
    <div class="tm-page-wrap mx-auto">
        <div class="position-relative">
            <header class="position-absolute tm-site-header @(IsLoginPage() ? "additional-class" : "")">
                <div class="container-fluid position-relative">
                    <div class="row">
                        <div class="col-7 col-lg-4 col-md-3">
                            <a href="javascript:void(0);" @onclick="NavigateToHome" class="tm-bg-black text-center tm-logo-container position-relative">
                                <img src="assets/img/eurofleurs-logo.png" alt="logo">
                                <div class="rotate_custom"></div>
                                <p>FloriTrade Bestellsystem</p>
                            </a>
                        </div>
                        @if (!IsLoginOrContactPage())
                        {
                            <NavMenu />
                        }
                    </div>
                </div>
            </header>

            @if (IsLoginOrContactPage())
            {
                <Banner />
            }
        </div>
        <div class="container-fluid">
            <div id="content" class="mx-auto tm-content-container">
                <main>
                    @Body
                </main>
                <footer>
                    @if (IsLoginOrContactPage())
                    {
                        <LoginFooter />
                    }
                    <Footer IsLoginOrContactPage="IsLoginOrContactPage()" />
                </footer>
            </div>
        </div>
        <Modal />
    </div>
</CascadingValue>

@code {
    private bool isAuthenticatedLoaded = false;

    private bool IsLoginOrContactPage()
    {
        var currentPath = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).PathAndQuery.ToLower();
        return currentPath.Contains("/login") || currentPath.Contains("/contact");
    }

    private bool IsLoginPage()
    {
        var currentPath = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).PathAndQuery.ToLower();
        return currentPath.Contains("/login");
    }

    private void NavigateToHome()
    {
        if (AuthService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/home");
        }
    }

    private void Logout()
    {
        AuthService.Logout();
        NavigationManager.NavigateTo("/login");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.LoadAuthenticationStateAsync();

            if (!AuthService.IsAuthenticated && !IsLoginOrContactPage())
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                isAuthenticatedLoaded = true;
                StateHasChanged(); 
            }
        }
    }
}
